import Foundation
import AppKit

public struct ProcessedContent {
    public let content: String
    public let detectedLanguage: String?
    public let isCode: Bool
    public let metadata: [String: Any]
    
    public init(content: String, detectedLanguage: String? = nil, isCode: Bool = false, metadata: [String: Any] = [:]) {
        self.content = content
        self.detectedLanguage = detectedLanguage
        self.isCode = isCode
        self.metadata = metadata
    }
}

public class CursorIntegration: ObservableObject {
    @Published public var isAutoPasteEnabled: Bool = false
    private let analyzer = AIAnalyzer()
    
    public init() {}
    
    // MARK: - Clipboard Operations
    
    public func readFromClipboard() -> String {
        let pasteboard = NSPasteboard.general
        return pasteboard.string(forType: .string) ?? ""
    }
    
    public func detectCursorContent(_ content: String) -> Bool {
        // Detect content that likely came from Cursor
        let cursorIndicators = [
            "// From Cursor",
            "/* Cursor",
            "# Generated by Cursor",
            "// Cursor AI"
        ]
        
        for indicator in cursorIndicators {
            if content.contains(indicator) {
                return true
            }
        }
        
        // Also detect if it's code-like content which is common from Cursor
        let analysis = analyzer.analyzeContent(content)
        return analysis.contentType == .code && analysis.confidence > 0.5
    }
    
    // MARK: - Content Processing
    
    public func processCursorContent(_ content: String) -> ProcessedContent {
        let analysis = analyzer.analyzeContent(content)
        
        let metadata: [String: Any] = [
            "analysisConfidence": analysis.confidence,
            "detectedPatterns": analysis.patterns.map { "\($0)" },
            "suggestedDiagrams": analysis.suggestedDiagrams.map { $0.displayName }
        ]
        
        return ProcessedContent(
            content: content,
            detectedLanguage: analysis.programmingLanguage,
            isCode: analysis.contentType == .code,
            metadata: metadata
        )
    }
    
    // MARK: - Auto-paste Settings
    
    public func enableAutoPaste() {
        isAutoPasteEnabled = true
    }
    
    public func disableAutoPaste() {
        isAutoPasteEnabled = false
    }
    
    public func isAutoPasteEnabled() -> Bool {
        return isAutoPasteEnabled
    }
    
    // MARK: - Note Creation
    
    public func createNoteFromCursor(content: String, notesManager: NotesManager) -> Note? {
        guard !content.isEmpty else { return nil }
        
        let processedContent = processCursorContent(content)
        let title = generateTitleFromContent(content)
        
        return notesManager.createNote(title: title, content: content)
    }
    
    public func generateTitleFromContent(_ content: String) -> String {
        let analysis = analyzer.analyzeContent(content)
        
        if let language = analysis.programmingLanguage {
            // Generate title based on code content
            if content.contains("class ") {
                return "\(language) Class Definition"
            } else if content.contains("function") || content.contains("func") || content.contains("def") {
                return "\(language) Function"
            } else if content.contains("interface") {
                return "\(language) Interface"
            } else {
                return "\(language) Code Snippet"
            }
        } else {
            // Generate title from text content
            let lines = content.components(separatedBy: .newlines)
            let firstLine = lines.first?.trimmingCharacters(in: .whitespacesAndNewlines) ?? ""
            
            if firstLine.count > 0 && firstLine.count <= 50 {
                return firstLine
            } else if content.lowercased().contains("meeting") {
                return "Meeting Notes"
            } else if content.lowercased().contains("todo") || content.lowercased().contains("task") {
                return "Task List"
            } else if content.lowercased().contains("project") {
                return "Project Notes"
            } else {
                return "Note from Cursor"
            }
        }
    }
    
    // MARK: - Monitoring
    
    public func startClipboardMonitoring() {
        // In a real implementation, this would set up clipboard monitoring
        // For testing purposes, we'll just enable auto-paste
        enableAutoPaste()
    }
    
    public func stopClipboardMonitoring() {
        disableAutoPaste()
    }
    
    // MARK: - Utility Methods
    
    public func validateCursorContent(_ content: String) -> Bool {
        return !content.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    public func sanitizeContent(_ content: String) -> String {
        // Remove any potentially harmful content or clean up formatting
        return content.trimmingCharacters(in: .whitespacesAndNewlines)
    }
}